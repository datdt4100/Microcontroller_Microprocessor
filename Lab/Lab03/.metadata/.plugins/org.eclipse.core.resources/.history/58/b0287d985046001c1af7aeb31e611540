/*
 * traffic_light_sys.c
 *
 *  Created on: Nov 10, 2021
 *      Author: TRAN DAT
 */
#include "traffic_light_sys.h"

typedef enum LIGHT_STATE {
	RED,
	AMBER,
	GREEN
} trafficLightState_t;

static trafficLightState_t CURR_STATE[2];


typedef enum SYS_STATE
{
	NORMAL,
	MODIFY_LED_RED,
	CONFIRM_RED,
	MODIFY_LED_YELLOW,
	CONFIRM_YELLOW
} state_t;

static state_t MODE;

static char TIME_RED = 15;
static char TIME_AMBER = 3;
static char TIME_GREEN = 12;
int idxLED = 0;

static char TIME[2];

uint8_t LED7SEG_BUFFER[2][2] = {{0x08, 0x08}, {0x08, 0x08}};
uint16_t LED_Cathod[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
void Traffic_Init()
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
		                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
	MODE = NORMAL;
	setTimer7SegLED(50);
	setTimerTrafficLED(50);
	CURR_STATE[0] = RED;
	CURR_STATE[1] = GREEN;
	TIME[0] = TIME_RED;
	TIME[1] = TIME_GREEN;
	Led7SegBuffer_update();
}
void traffic_update()
{
	for (int i = 0; i < 2; i ++){
		switch (CURR_STATE[i])
		{
		case RED:
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 << (i * 3), RESET);
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 << (i * 3), SET);
			if (TIME[i]-- == 0)
			{
				CURR_STATE[i] = GREEN;
				TIME[i] = TIME_GREEN;
			}
			break;
		case GREEN:
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 << (i * 3), RESET);
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 << (i * 3), SET);
			if (TIME[i]-- == 0)
			{
				CURR_STATE[i] = AMBER;
				TIME[i] = TIME_AMBER;
			}
			break;
		case AMBER:
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 << (i * 3), RESET);
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 << (i * 3), SET);
			if (TIME[i]-- == 0)
			{
				CURR_STATE[i] = RED;
				TIME[i] = TIME_RED;
			}
			break;
		}

	}
}

void Led7SegBuffer_update()
{
	LED7SEG_BUFFER[0][0] = TIME[0] / 10;
	LED7SEG_BUFFER[0][1] = TIME[0] % 10;

	LED7SEG_BUFFER[1][0] = TIME[1] / 10;
	LED7SEG_BUFFER[1][1] = TIME[1] % 10;
}

void Led7Seg_update(int idx)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 << (1 - idx), SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 << idx, RESET);

	//GPIOB->BSRR = (uint32_t)((LED_Cathod[LED7SEG_BUFFER[1][idx]]) << 23) | ((~LED_Cathod[LED7SEG_BUFFER[1][idx]]) << 7) ;
	//GPIOB->BSRR = (uint32_t)((LED_Cathod[LED7SEG_BUFFER[0][idx]]) << 16) | (~LED_Cathod[LED7SEG_BUFFER[0][idx]]);
	//uint16_t bits = (LED_Cathod[LED7SEG_BUFFER[1][idx]] << 7u) | (LED_Cathod[LED7SEG_BUFFER[0][idx]]);
	//GPIOB->BSRR = (uint32_t)bits << 16u | (~bits << 2u >> 2u);
}

void fsm_input_button()
{
	switch (MODE)
	{
	case NORMAL:
		if (timerTrafficLED_FLAG() == 1)
		{
			traffic_update();
			Led7SegBuffer_update();
			setTimerTrafficLED(1000);
		}
		if (timer7SegLED_FLAG() == 1)
		{
			Led7Seg_update(idxLED);
			idxLED = (idxLED == 0);
			setTimer7SegLED(500);
		}
		if (is_pressed(0))
			MODE = MODIFY_LED_RED;
		break;
	case MODIFY_LED_RED:
		break;
	case CONFIRM_RED:
		break;
	case CONFIRM_YELLOW:
		break;
	case MODIFY_LED_YELLOW:
		break;
	}
}

